import React, { useEffect, useState } from "react";
import { TrashIcon } from "@heroicons/react/24/solid";
import ConfirmModal from "../components/modal/ConfirmModal";
import AlertModal from "../components/modal/AlertModal";
import { useAuthContext } from "../hooks/useAuthContext"; // Import the context
import { useCartContext } from "../context/CartContext"; // Import the context
// import { useEffect } from "react";

function CartPage() {
  const { user } = useAuthContext();
  const { state, dispatch } = useCartContext(); // Access global state and dispatch
  const { cart, products } = state;

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [itemToDelete, setItemToDelete] = useState(null);
  const [showAlert, setShowAlert] = useState(false);
  const [alertInfo, setAlertInfo] = useState({ message: "", status: true });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  useEffect(() => {
    const fetchCart = async () => {
      try {
        const response = await fetch("/api/carts", {
          headers: { Authorization: `Bearer ${user.token}` },
        });
        if (!response.ok) throw new Error("Failed to fetch cart data");
        const json = await response.json();
        dispatch({ type: "SET_CART", payload: json });
        dispatch({ type: "SET_PRODUCTS", payload: json.cartItems });
        setError(null);
      } catch (error) {
        setError("Failed to load cart data. Please try again.");
      } finally {
        setLoading(false);
      }
    };

    if (user) {
      fetchCart();
    }
  }, [user, dispatch]);

  // const calculateTotalPrice = () => {
  //   if (!cart || cart.length === 0 || products.length === 0) return "0.00";
  //   return cart
  //     .reduce((total, cartItem, index) => {
  //       const product = products[index];
  //       if (!product) return total;
  //       return total + product.price * cartItem.quantity;
  //     }, 0)
  //     .toFixed(2);
  // };
  // const updateCartItemQuantity = (id, newQuantity) => {
  //   const updatedCart = cart.map((cartItem) =>
  //     cartItem._id === id
  //       ? { ...cartItem, quantity: parseInt(newQuantity) }
  //       : cartItem
  //   );
  //   dispatch({ type: "SET_CART", payload: updatedCart }); // Dispatch updated cart
  // };

  // const fetchAndUpdateCart = async (updatedCart) => {
  //   try {
  //     const response = await fetch(`/api/carts/`, {
  //       method: "PATCH",
  //       headers: {
  //         "Content-Type": "application/json",
  //         Authorization: `Bearer ${user.token}`,
  //       },
  //       body: JSON.stringify({ cartItems: updatedCart }),
  //     });
  //     const json = await response.json();
  //     console.log(json);
  //   } catch (error) {
  //     console.error("Error updating cart:", error);
  //   }
  // };

  // const handleDelete = (id) => {
  //   setItemToDelete(id);
  //   setIsModalOpen(true);
  // };

  // const confirmDelete = () => {
  //   const updatedCart = cart.filter((item) => item._id !== itemToDelete);
  //   dispatch({ type: "SET_CART", payload: updatedCart }); // Dispatch updated cart
  //   setIsModalOpen(false);
  //   setItemToDelete(null);
  //   showAlertWithMessage("Item deleted successfully!", true);
  // };

  // const cancelDelete = () => {
  //   setIsModalOpen(false);
  //   setItemToDelete(null);
  // };

  // const showAlertWithMessage = (message, status) => {
  //   setAlertInfo({ message, status });
  //   setShowAlert(true);
  //   setTimeout(() => setShowAlert(false), 1000);
  // };

  if (loading) return <div className="text-center">Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  if (cart.length===0) return <div>Your cart is empty.</div>;
  if (cart.length!=0) return <div>{cart}</div>;

  return<div>Cart Page</div>
  // return (
  //   <div
  //     className="p-5 flex flex-col"
  //     style={{ maxHeight: "calc(100vh - 100px)" }}
  //   >
  //     <h1 className="text-3xl font-bold text-center">My Cart ðŸ›’</h1>
  //     <p>{cart.length} Items</p>
  //     <div
  //       className="border-t border-secondary-light-gray mt-2 flex-1 overflow-auto"
  //       style={{ maxHeight: "calc(100vh - 180px)" }}
  //     >
  //       {cart.map((cartItem, index) => (
  //         <div
  //           className="flex items-center justify-between py-2 border-b border-secondary-light-gray"
  //           key={cartItem._id}
  //         >
  //           {products[index] ? (
  //             <>
  //               <img
  //                 src={`/assets/${products[index].images[0]}`}
  //                 alt={products[index].name}
  //                 className="w-20 h-20 object-contain"
  //               />
  //               <div className="flex-1 ml-2">
  //                 <p className="text-lg sm:text-xl sm:font-light">
  //                   {products[index].name}
  //                 </p>
  //                 <p className="text-sm sm:text-lg text-secondary-gray">
  //                   ${products[index].price}
  //                 </p>
  //               </div>
  //             </>
  //           ) : (
  //             <div>Loading Product..</div>
  //           )}
  //           <div className="flex justify-center">
  //             <select
  //               value={cartItem.quantity}
  //               onChange={(e) =>
  //                 updateCartItemQuantity(cartItem._id, e.target.value)
  //               }
  //               className="border border-secondary-light-gray rounded-full py-1 px-2 flex justify-center"
  //             >
  //               {[...Array(9)].map((_, qty) => (
  //                 <option key={qty} value={qty + 1}>
  //                   {qty + 1}
  //                 </option>
  //               ))}
  //             </select>
  //             <button
  //               className="ml-2"
  //               onClick={() => handleDelete(cartItem._id)}
  //             >
  //               <TrashIcon className="h-4 w-4 sm:h-5 sm:w-5 text-secondary-accent hover:text-opacity-80" />
  //             </button>
  //           </div>
  //         </div>
  //       ))}
  //     </div>

  //     <div className="flex justify-between font-bold py-2 border-t-2 border-primary-dark">
  //       <p>Total Amount:</p>
  //       <p>${calculateTotalPrice()}</p>
  //     </div>

  //     <div className="sm:ml-auto">
  //       <div className="flex mb-2">
  //         <input
  //           type="text"
  //           placeholder="Enter Promo Code"
  //           className="flex-1 p-2 border border-secondary-gray rounded-l-md focus:border-2 focus:border-primary-dark focus:outline-none"
  //         />
  //         <button className="p-2 bg-primary-dark text-white border-none rounded-r-md cursor-pointer hover:bg-opacity-90">
  //           Apply
  //         </button>
  //       </div>

  //       <div className="flex mb-2">
  //         <span>ðŸšš</span>
  //         <p className="ml-2">Free Shipping applied over $299.00</p>
  //       </div>
  //       <button className="py-3 w-full bg-primary-dark text-white border-none rounded-md cursor-pointer hover:bg-opacity-90">
  //         Checkout
  //       </button>
  //     </div>

  //     {isModalOpen && (
  //       <ConfirmModal
  //         message={"Do you want to delete this item?"}
  //         onConfirm={confirmDelete}
  //         onCancel={cancelDelete}
  //       />
  //     )}

  //     {showAlert && (
  //       <AlertModal message={alertInfo.message} status={alertInfo.status} />
  //     )}
  //   </div>
  // );
}

export default CartPage;
